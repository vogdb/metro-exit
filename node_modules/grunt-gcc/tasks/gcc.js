module.exports = function (grunt) {
  var fs = require('fs')
  var path = require('path')
  var exec = require('child_process').exec

  function gcc(data, done) {
    var cmd = 'java -jar ' + data.jar + ' '
    var filters = getFiles(data)
    var complete = 0

    for (var i = 0; i < filters.length; i++) {
      var filterFiles = filters[i].files
      complete = complete + filterFiles.length
      for (var k = 0; k < filterFiles.length; k++) {
        var command = cmd + commandParams(data.root, filters[i].params, filterFiles[k])
        //grunt.log.writeln('Executing: ' + command)
        exec(command, function execCB(err, stdout, stderr) {
          complete--;
          if (err) {
            grunt.warn(err)
            done(false)
          }
          grunt.log.writeln(stdout || stderr)
          if (complete <= 0) {
            done(true)
          }
        })
      }
    }

    function commandParams(root, params, file) {
      var result
      if (params) {
        result = params + ' '
      } else {
        result = ''
      }
      result += '--js ' + root + '/' + file
      result += ' --js_output_file ' + root + '/' + file + '.tmp'
      result += '; mv ' + root + '/' + file + '.tmp ' + root + '/' + file
      return result
    }

    function getFiles(data) {
      var files = fs.readdirSync(data.root)
      var filters = data.filters
      for (var i = 0; i < files.length; i++) {
        var file = files[i]
        if (!data.exclude || !data.exclude.test(file)) {
          for (var k = 0; k < filters.length; k++) {
            if (filters[k].condition.test(file)) {
              //grunt.log.writeln('including: ' + file)
              if (!filters[k]['files']) {
                filters[k]['files'] = []
              }
              filters[k].files.push(file)
              break
            }
          }
        } else {
          //grunt.log.writeln('excluding: ' + file)
        }
      }
      return filters
    }
  }

  grunt.registerMultiTask('gcc', 'Google Closure Library compiler', function () {
    gcc(this.data, this.async())
  })

}